---
name: Integrate

# yamllint disable-line rule:truthy
on:
  pull_request:
  push:
    branches:
      - 3.x.x
    tags:
  # Run every night at 05:15.
  schedule:
    - cron: '15 5 * * *'

jobs:
  php:
    name: PHP ${{ matrix.php-version }} / Composer ${{ matrix.composer-version }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - '7.4'
          - '8.0'
          - '8.1'
        composer-version:
          - 2
        include:
          - php-version: '7.4'
            prefer-lowest: --prefer-lowest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Some tests run Composer via command line. It's not possible to require
      # a package in the detached state. Checkout to a branch to workaround
      # this.
      - name: Checkout to a branch
        run: git checkout -b test

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: ${{ matrix.php-version }}
          tools: composer:v${{ matrix.composer-version }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: php-${{ matrix.php-version }}-${{ matrix.composer-version }}-${{ hashFiles('composer.json') }}
          restore-keys: php-${{ matrix.php-version }}-${{ matrix.composer-version }}-

      - name: Install Composer dependencies
        run: composer update --no-progress --prefer-dist --optimize-autoloader ${{ matrix.prefer-lowest }}

      - name: Coding standards
        run: vendor/bin/phpcs

      - name: Static Code Analysis
        run: vendor/bin/phpstan analyse

      - name: Tests
        run: vendor/bin/phpunit

  molecule:
    name: Molecule / ubuntu/${{ matrix.molecule-platform }}

    needs: php

    runs-on: ubuntu-latest

    # Workaround 'XXX may have been in progress in another thread when fork()
    # was called.'
    # See https://github.com/ansible/ansible/issues/32499
    env:
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: 'YES'

    strategy:
      matrix:
        composer-version:
          - 2
        php-version:
          - '7.4'
        python-version:
          - '3.8'
        molecule-platform:
          - bionic64
          - focal64

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: ${{ matrix.php-version }}
          tools: composer:v${{ matrix.composer-version }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: php-${{ matrix.php-version }}-${{ matrix.composer-version }}-${{ hashFiles('composer.json') }}
          restore-keys: php-${{ matrix.php-version }}-${{ matrix.composer-version }}-

      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader --no-dev

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get PiP Cache Directory
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: Cache PiP dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('./molecule/requirements.txt') }}

      - name: Cache Python environment
        uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('./molecule/requirements.txt') }}

      - name: Install Molecule and it's dependencies
        run: pip install --upgrade --upgrade-strategy eager --requirement ./molecule/requirements.txt

      - name: Run Molecule tests
        run: molecule test
        env:
          MOLECULE_PLATFORM: ${{ matrix.molecule-platform }}

  vagrant:
    name: Vagrant / ubuntu/${{ matrix.vagrant-box }}

    needs: molecule

    runs-on: macos-12

    strategy:
      matrix:
        composer-version:
          - 2
        php-version:
          - '7.4'
        vagrant-box:
          - bionic64
          - focal64

    # Workaround 'XXX may have been in progress in another thread when fork()
    # was called.'
    # See https://github.com/ansible/ansible/issues/32499
    env:
      OBJC_DISABLE_INITIALIZE_FORK_SAFETY: 'YES'

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: none
          php-version: ${{ matrix.php-version }}
          tools: composer:v${{ matrix.composer-version }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: php-${{ matrix.php-version }}-${{ matrix.composer-version }}-${{ hashFiles('composer.json') }}
          restore-keys: php-${{ matrix.php-version }}-${{ matrix.composer-version }}-

      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader --no-dev

      - name: Set Vagrant box to use
        run: sed -i '' 's/focal64/${{ matrix.vagrant-box }}/g' default.vm-settings.yml

      - name: Install Vagrant
        run: brew install vagrant

      # See https://github.com/hashicorp/vagrant/pull/12581
      - name: Fix missing VagrantPlugins::HostDarwin::Cap::Version on Big Sur
        run: |
          file_to_patch="/opt/vagrant/embedded/gems/2.2.19/gems/vagrant-2.2.19/plugins/hosts/darwin/cap/path.rb"
          download_url="https://raw.githubusercontent.com/hashicorp/vagrant/42db2569e32a69e604634462b633bb14ca20709a/plugins/hosts/darwin/cap/path.rb"
          if [ "$(vagrant --version)" = 'Vagrant 2.2.19' ]; then
            sudo rm $file_to_patch
            sudo wget $download_url -q -O $file_to_patch
          fi

      - name: Allow 10.0.0.0/8 192.168.0.0/16 ranges to be assigned to host-only adapters
        run: |
          sudo mkdir /etc/vbox
          echo "* 10.0.0.0/8 192.168.0.0/16" | sudo tee -a /etc/vbox/networks.conf

      - name: Start the machine (without provisioning)
        run: vagrant up --no-provision

  code-coverage:
    name: Code Coverage

    needs: php

    runs-on: ubuntu-latest

    strategy:
      matrix:
        composer-version:
          - 2
        php-version:
          - 7.4

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 50

      # Some tests run Composer via command line. It's not possible to require
      # a package in the detached state. Checkout to a branch to workaround
      # this.
      - name: Checkout to a branch
        run: git checkout -b test

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          coverage: xdebug
          php-version: ${{ matrix.php-version }}
          tools: composer:v${{ matrix.composer-version }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: php-${{ matrix.php-version }}-${{ matrix.composer-version }}-${{ hashFiles('composer.json') }}
          restore-keys: php-${{ matrix.php-version }}-${{ matrix.composer-version }}-

      - name: Install Composer dependencies
        run: composer install --no-interaction --no-progress --prefer-dist --optimize-autoloader

      - name: Collect code coverage
        run: vendor/bin/phpunit --testsuite=unit --coverage-clover=coverage.xml

      - name: Send code coverage report to Codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: coverage.xml
